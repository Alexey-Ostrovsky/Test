#include "imports/stdlib.fc";
#include "imports/params.fc";
#include "imports/constants.fc";
#include "imports/jetton-utils.fc";
#include "imports/op-codes.fc";
#include "imports/utils.fc";

;;      data sctructure:

;;      jetton minter address
;;      jetton wallet code
;;      public key

;;      seqno
;;      admin address
;;      commission_percent
;;      commission address

;;      admin operations

(slice, cell, int, int, slice, int, slice) load_data() inline {
    slice ds = get_data().begin_parse();

    slice immutable = ds~load_ref().begin_parse();

    return (
        immutable~load_msg_addr(),      ;;immutable data
        immutable~load_ref(),
        immutable~load_uint(256),

        ds~load_uint(32),
        ds~load_msg_addr(),      ;;mutable data
        ds~load_uint(8),
        ds~load_msg_addr()       ;;commission address
    );
}

() save_data (int seqno, slice admin_addr, int commission_percent, slice commission_address) impure inline {
    slice ds = get_data().begin_parse();

    set_data(
        begin_cell()
            .store_ref(ds~load_ref())

            .store_uint(seqno, 32)
            .store_slice(admin_addr)             ;;mutable data
            .store_uint(commission_percent, 8)
            .store_slice(commission_address)
        .end_cell()
    );
}

(int, slice, int, slice) get_current_state() method_id {
    slice ds = get_data().begin_parse();
    ds~load_ref();

    return (
        ds~load_uint(32),
        ds~load_msg_addr(),     ;;mutable data
        ds~load_uint(8),
        ds~load_msg_addr()      ;;commission address
    );
}

(int) get_current_seqno() method_id {
    slice ds = get_data().begin_parse();
    ds~load_ref();

    return (
        ds~load_uint(32)
    );
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);

    if(flags & 1) {
        return ();
    }

    if(in_msg_body.slice_empty?()) {
        return ();
    }

    slice sender_addr = cs~load_msg_addr();

    ;;get persistent data
    (slice master_addr,
    cell wallet_code,
    _,
    int seqno,
    slice admin_addr,
    int commission_percent,
    slice commission_addr) = load_data();

    slice jetton_address = calculate_user_jetton_wallet_address(my_address(), master_addr, wallet_code);

    ;; in case we recieved notification from controlled jetton wallet
    if(equal_slices(sender_addr, jetton_address)) {
        int op = in_msg_body~load_uint(32);
        int query_id = in_msg_body~load_uint(64);

        throw_unless(709, (op == op::transfer_notification()));                         ;;i have no idea why 709

        ;;calculating commission amount
        int jetton_recieved = in_msg_body~load_coins();
        slice origin_addr = in_msg_body~load_msg_addr();                                ;; skip original source of jettons
        slice either_forward_payload = in_msg_body;
        int commission = (jetton_recieved / 100) * commission_percent;

        slice commission_jetton_addr = calculate_user_jetton_wallet_address(commission_addr, master_addr, wallet_code);

        var msg = begin_cell()
            .store_uint(0x18, 6)
            .store_slice(jetton_address)
            .store_coins(0)
            .store_uint(1, 1 + 4 + 4 + 64 + 32 + 1 + 1);

        var msg_body = begin_cell()
            .store_uint(op::transfer(), 32)
            .store_uint(query_id, 64)
            .store_coins(commission)
            .store_slice(commission_addr)
            .store_slice(origin_addr)
            .store_dict(new_dict())
            .store_coins(0)
            .store_slice(either_forward_payload)
        .end_cell();

        msg = msg.store_ref(msg_body);
        send_raw_message(msg.end_cell(), 64);                       ;; consider possible change of mod on 1
        return();
    }

    ;;admin manipulations
    if(equal_slices(admin_addr, sender_addr)) {
        int op = in_msg_body~load_uint(32);
        int query_id = in_msg_body~load_uint(64);

        ;;change_admin
        if(op == op::transfer_ownership()) {
            slice new_admin = in_msg_body~load_msg_addr();
            save_data(seqno, new_admin, commission_percent, commission_addr); 
            return();                                               ;; consider sending back ton amount
        }

        ;;withdraw
        if(op == op::withdraw()) {
            int withdraw_jetton_amount = in_msg_body~load_coins();
            slice reciever_addr = in_msg_body~load_msg_addr();
            slice either_forward_payload = in_msg_body;

            var msg = begin_cell()
                .store_uint(0x18, 6)
                .store_slice(jetton_address)
                .store_coins(0)
                .store_uint(1, 1 + 4 + 4 + 64 + 32 + 1 + 1);

            var msg_body = begin_cell()
                .store_uint(op::transfer(), 32)
                .store_uint(query_id, 64)
                .store_coins(withdraw_jetton_amount)
                .store_slice(reciever_addr)
                .store_slice(admin_addr)
                .store_dict(new_dict())
                .store_coins(0)
                .store_slice(either_forward_payload)
            .end_cell();

            msg = msg.store_ref(msg_body);
            send_raw_message(msg.end_cell(), 64);                       ;; consider possible change of mod on 1
            return();
        }

        throw(709);
    }

    throw(0xffff);
}

() recv_external(slice in_msg) impure {
    var signature = in_msg~load_bits(512);
    var hash = slice_hash(in_msg);

    (_,
    _,
    int public_key,
    int seqno,
    slice admin_addr,
    int commission_percent,
    slice commission_addr) = load_data();


    throw_unless(4242, check_signature(hash, signature, public_key));

    int msg_seqno = in_msg~load_uint(32);
    throw_unless(4241, msg_seqno == seqno);

    accept_message();

    save_data(seqno + 1, admin_addr, commission_percent, commission_addr); 

    int op = in_msg~load_uint(32);
    if(op == "destroy"c) {
        cell msg = begin_cell()
            .store_uint(0x18, 6)
            .store_slice(admin_addr)
            .store_coins(0)
            .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
        .end_cell();

        send_raw_message(msg, 128 + 32);
        return();
    }

    throw(0xffff);
}
